<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yangjiayu.exam_system_server_online.mapper.QuestionMapper">

    <!--
    1.不能选择resultType 因为我是多表查询，赋值的结果有嵌套关系resultMap自定义结果映射
    2.不能使用；结尾。原因是使用分页插件 sql ; + limit
    -->

    <resultMap id="questionMap" type="com.yangjiayu.exam_system_server_online.entity.Question">
        <!-- 第一层：question的属性 -->
        <!-- 主键属性 -->
        <id column="id" property="id"></id>
        <!-- 非主键列，可以省略！ 但是，如果有嵌套需要开启深层次映射full -->
        <!-- <result column="title" property="title"/> -->
        <!-- 下一层映射 对一：答案 -->
        <association property="answer" javaType="com.yangjiayu.exam_system_server_online.entity.QuestionAnswer">
            <id column="qa_id" property="id" />
            <!-- 省略question_id answer keywords -->
            <result column="qa_create_time" property="createTime" />
            <result column="qa_update_time" property="updateTime" />
            <result column="qa_is_deleted" property="isDeleted" />

        </association>

        <!-- 下一层映射 对多：选项  分步查询 出发第二次查询
            column -> 向下传递的列 （当前查询结果中 向下传递的列名）
            select -> 触发的第二次查询mapper的全限定符，方法名

        -->
        <collection property="choices" ofType="com.yangjiayu.exam_system_server_online.entity.QuestionChoice"
        column="id" select="com.yangjiayu.exam_system_server_online.mapper.QuestionChoiceMapper.selectListByQuestionId"
        />
    </resultMap>

    <select id="selectQuestionPage" resultMap="questionMap">
        select qs.*,
               qa.id qa_id,
               qa.question_id,
               qa.answer,
               qa.keywords,
               qa.create_time qa_create_time,
               qa.update_time qa_update_time,
               qa.is_deleted qa_is_deleted
            from questions qs join question_answers qa on qs.id = qa.question_id
        where qa.is_deleted = 0 and qs.is_deleted = 0
        <if test="queryVo.type != null and queryVo.type != ''">
            and qs.type = #{queryVo.type}
        </if>
        <if test="queryVo.difficulty != null and queryVo.difficulty != ''">
            and qs.difficulty = #{queryVo.difficulty}
        </if>
        <if test="queryVo.categoryId != null">
            and qs.category_id = #{queryVo.categoryId}
        </if>
        <if test="queryVo.keyword != null and queryVo.keyword != ''">
            and title like concat('%',#{queryVo.keyword},'%')
        </if>
        order by qs.create_time desc
    </select>



    <resultMap id="detailQuestionMap" type="com.yangjiayu.exam_system_server_online.entity.Question">
        <id column="id" property="id" />
        <association property="answer" javaType="com.yangjiayu.exam_system_server_online.entity.QuestionAnswer">
            <id column="qas_id" property="id" />
            <result column="qas_create_time" property="createTime" />
            <result column="qas_update_time" property="updateTime" />
            <result column="question_id" property="questionId" />
        </association>
        <collection property="choices" ofType="com.yangjiayu.exam_system_server_online.entity.QuestionChoice" notNullColumn="qcs_id">
            <id column="qcs_id" property="id" />
            <result column="qcs_question_id" property="questionId" />
            <result column="qcs_create_time" property="createTime" />
            <result column="qcs_update_time" property="updateTime" />
        </collection>
    </resultMap>


    <select id="customQueryQuestionListByPaperId" resultMap="detailQuestionMap">
        select
            qs.*,
            qas.id qas_id,
            qas.question_id,
            qas.answer,
            qas.keywords,
            qas.create_time qas_create_time,
            qas.update_time qas_update_time,
            qcs.id qcs_id,
            qcs.question_id qcs_question_id,
            qcs.content,
            qcs.is_correct,
            qcs.sort,
            qcs.create_time qcs_create_time,
            qcs.update_time qcs_update_time,
            pq.score  paper_score
        from paper_question pq
                 join questions qs on pq.question_id = qs.id
                 join question_answers qas on qs.id = qas.question_id
                 left join question_choices qcs on qs.id = qcs.question_id and qcs.is_deleted  = 0
        where pq.is_deleted = 0 and qs.is_deleted = 0 and qas.is_deleted = 0 and pq.paper_id = #{paperId} order by qcs.sort asc ;
    </select>
</mapper>