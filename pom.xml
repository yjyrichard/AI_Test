<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>3.0.5</version>
    </parent>

    <groupId>com.yangjiayu</groupId>
    <artifactId>exam_system_server_online</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>exam_system_server_online</name>
    <description>exam_system_server_online</description>



    <properties>
        <java.version>17</java.version>
        <mybatis-plus.version>3.5.3.1</mybatis-plus.version>
        <mysql.version>8.0.33</mysql.version>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Spring Boot Web Starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- MyBatis Plus -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>${mybatis-plus.version}</version>
        </dependency>

        <!-- MySQL 驱动 -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <version>${mysql.version}</version>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Jackson JSON处理 -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <!-- Fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>2.0.25</version>
        </dependency>

        <!-- Excel文件处理 - Apache POI -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>5.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>5.2.4</version>
        </dependency>

        <!-- HTTP客户端 - 用于调用Kimi API -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>

        <!-- MinIO 对象存储客户端 -->  <!-- MinIO文件存储依赖 -->
        <dependency>
            <groupId>io.minio</groupId>
            <artifactId>minio</artifactId>
            <version>8.5.7</version>
        </dependency>

        <!-- Knife4j API文档增强工具 - 提供美观的Swagger UI界面 -->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>
            <version>4.4.0</version>
        </dependency>

        <!-- Redis 缓存依赖  redis的依赖后续导入-->
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-data-redis</artifactId>
                </dependency>

        <!-- Redis 连接池依赖 -->
                    <dependency>
                        <groupId>org.apache.commons</groupId>
                        <artifactId>commons-pool2</artifactId>
                    </dependency>

        <!-- Redisson 分布式锁 -->
        <dependency>
            <groupId>org.redisson</groupId>
            <artifactId>redisson</artifactId>
            <version>3.24.3</version>
        </dependency>

        <!-- 测试依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <!-- Spring Boot Maven插件，用于打包可执行的JAR文件 -->
    <build>
        <!-- build 标签用于配置 Maven 项目的构建相关设置，包含插件、资源等配置 -->
        <plugins>
            <!-- plugins 标签用于配置构建过程中要使用的插件集合 -->

            <!-- 配置 Spring Boot Maven 插件，主要用于打包 Spring Boot 应用等功能 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- configuration 用于配置当前插件的具体参数 -->
                    <excludes>
                        <!-- excludes 用于配置要排除的依赖，这里针对的是打包等过程中排除特定依赖 -->
                        <exclude>
                            <!-- 排除 Lombok 依赖，Lombok 一般在编译期生效，打包后无需再包含其依赖（避免可能的冲突等情况） -->
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>

            <!-- 配置 Lombok Maven 插件，用于处理 Lombok 注解相关的操作，比如 delombok 功能 -->
            <plugin>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok-maven-plugin</artifactId>
                <version>1.18.20.0</version> <!-- 指定插件的版本 -->
                <executions>
                    <!-- executions 用于配置插件在构建生命周期的哪个阶段执行哪些目标（goal） -->
                    <execution>
                        <phase>generate-sources</phase>
                        <!-- phase 指定该插件执行的生命周期阶段，这里是在生成源码阶段执行，
                             generate-sources 阶段主要用于生成额外的 Java 源码（比如根据模板、注解等生成） -->
                        <goals>
                            <!-- goals 配置要执行的具体目标，delombok 目标的作用是将使用 Lombok 注解的类转换为
                                 不使用 Lombok 注解的标准 Java 类（展开 Lombok 注解对应的代码，方便一些场景下使用，
                                 比如某些代码分析工具可能对 Lombok 注解处理不太友好时） -->
                            <goal>delombok</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
